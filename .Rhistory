# denominator of r_a & r_a_max
denominator_mat = matrix(rep(2^(0:(ncol-1)/(alpha-1)), nrow), nrow, ncol, byrow=T)
# Get a vector of r_a
utility_matrix = ranked_mat/denominator_mat
r_a_vector = rowSums(utility_matrix)
# Rank the observed_matrix for r_a max in order to have the maximum achievable utility.
r_a_max_matrix = t(apply(observed_matrix, 1, sort,decreasing=T))
# Get a vector of r_a max
max_utility_matrix = r_a_max_matrix/denominator_mat
r_a_max_vector = rowSums(max_utility_matrix)
# Obtain the r_a / r_a_max score
r = 100 * sum(r_a_vector)/sum(r_a_max_vector)
return(r)
}
ranked_scoring(MS_pred,MS_observed_UI,5)
ranked_scoring(MS_pred,MS_observed_UI,10)
MS_pred[1,] - MS_observed_UI
MS_pred[1,] - MS_observed_UI[1,]
abs(MS_pred[1,] - MS_observed_UI[1,])
abs(MS_pred[1,] - MS_observed_UI[1,])/sum(MS_observed_UI[1,]!= 0)
sum(abs(MS_pred[1,] - MS_observed_UI[1,]))/sum(MS_observed_UI[1,]!= 0)
View(MS_observed_UI)
result = rep(0,nrow(observed_matrix))
i = 1
result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
ranked_scoring <- function(pred_matrix, observed_matrix){
for(i in 1:nrow(observed_matrix)){
result = rep(0,nrow(observed_matrix))
# Calculate the average absoluate deviation for each user
result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
}
return(mean(result))
}
MAE <- function(pred_matrix, observed_matrix){
for(i in 1:nrow(observed_matrix)){
result = rep(0,nrow(observed_matrix))
# Calculate the average absoluate deviation for each user
result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
}
return(mean(result))
}
MAE(MS_pred,MS_observed_UI)
MAE <- function(pred, test){
out = sum(abs(pred - test))/sum(test != 0)
return(out)
}
MAE(MS_pred,MS_observed_UI)
MAE <- function(pred_matrix, observed_matrix){
for(i in 1:nrow(observed_matrix)){
result = rep(0,nrow(observed_matrix))
# Calculate the average absoluate deviation for each user
result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
}
return(sum(result))
}
MAE(MS_pred,MS_observed_UI)
sum(observed_matrix[i,]!= 0)
sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
MAE <- function(pred_matrix, observed_matrix){
for(i in 1:nrow(observed_matrix)){
result = rep(0,nrow(observed_matrix))
# Calculate the average absoluate deviation for each user
result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
}
return(mean(result))
}
MAE(MS_pred,MS_observed_UI)
i = 2
result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
for(i in 1:nrow(observed_matrix)){
result = rep(0,nrow(observed_matrix))
# Calculate the average absoluate deviation for each user
result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
}
MAE <- function(pred_matrix, observed_matrix){
result = rep(0,nrow(observed_matrix))
for(i in 1:nrow(observed_matrix)){
# Calculate the average absoluate deviation for each user
result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
}
return(mean(result))
}
MAE(MS_pred,MS_observed_UI)
MAE <- function(pred, test){
out = sum(abs(pred - test))/sum(test != 0)
return(out)
}
MAE(MS_pred,MS_observed_UI)
result = rep(0,nrow(observed_matrix))
for(i in 1:nrow(observed_matrix)){
# Calculate the average absoluate deviation for each user
result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
}
result
setwd("/Users/wcheng/Desktop/Spring 2018/data science/project-3-algorithms-project-3-algorithms-group-2")
dir_MS <- "/data/Proj3_Data/MS_sample/"
dir_movie <- "/data/Proj3_Data/movie_sample/"
MS_test <- read.csv(paste(getwd(),dir_MS, "data_test.csv", sep = ""), as.is = TRUE, header = TRUE)
MS_train <- read.csv(paste(getwd(),dir_MS, "data_train.csv", sep = ""), as.is = TRUE, header = TRUE)
MS_train <- MS_train[, 2:4]
MS_test <- read.csv(paste(getwd(),dir_MS, "data_test.csv", sep = ""), as.is = TRUE, header = TRUE)
MS_test <- MS_test[, 2:4]
movie_train <- read.csv(paste(getwd(),dir_MS, "data_train.csv", sep = ""), as.is = TRUE, header = TRUE)
movie_train <- movie_train[, 2:4]
movie_train <- read.csv(paste(getwd(),dir_movie, "data_train.csv", sep = ""), as.is = TRUE, header = TRUE)
dir_movie <- "/data/Proj3_Data/eachmovie_sample/"
movie_train <- read.csv(paste(getwd(),dir_movie, "data_train.csv", sep = ""), as.is = TRUE, header = TRUE)
movie_train <- read.csv(paste(getwd(),dir_movie, "data_train.csv", sep = ""), as.is = TRUE, header = TRUE)
movie_train <- movie_train[, 2:4]
movie_train <- read.csv(paste(getwd(),dir_movie, "data_train.csv", sep = ""), as.is = TRUE, header = TRUE)
movie_train <- movie_train[, 2:4]
movie_test <- read.csv(paste(getwd(),dir_movie, "data_test.csv", sep = ""), as.is = TRUE, header = TRUE)
movie_test <- movie_test[, 2:4]
MS_UI <- MS_data_transform(MS_train)
source("./lib/functions.R")
MS_UI <- MS_data_transform(MS_train)
movie_UI <- movie_data_transform(movie_train)
run.pearson <- F
run.entropy <- F
run.spearman <- F
run.sqdiff <- F
run.cosin <- F
load <- T
# Constants for SimRank calculations
C1 <- 0.8
C2 <- 0.8
K <- 5
source("./lib/functions.R")
if(load ){
# Transform from narrow to wide, i.e. user-item matrix
# using MS_data_transform function
# Below takes 2 minutes
MS_UI <- MS_data_transform(MS_train)
save(MS_UI, file = "./output/MS_UI.RData")
# using MS_data_transform function
# Below takes 4 minutes
movie_UI <- movie_data_transform(movie_train)
save(movie_UI, file = "./output/movie_UI.Rdata")
}else{
# If we want to directly pull out the user-item matrix from the data folder
load("./output/MS_UI.Rdata")
load("./output/movie_UI.Rdata")
}
if(!load){
# Transform from narrow to wide, i.e. user-item matrix
# using MS_data_transform function
# Below takes 2 minutes
MS_UI <- MS_data_transform(MS_train)
save(MS_UI, file = "./output/MS_UI.RData")
# using MS_data_transform function
# Below takes 4 minutes
movie_UI <- movie_data_transform(movie_train)
save(movie_UI, file = "./output/movie_UI.Rdata")
}else{
# If we want to directly pull out the user-item matrix from the data folder
load("./output/MS_UI.Rdata")
load("./output/movie_UI.Rdata")
}
movie_UI         <- as.matrix(movie_UI)
movie_sim_weight <- matrix(NA, nrow = nrow(movie_UI), ncol = nrow(movie_UI))
movie_sim <- calc_weight(movie_UI, run.pearson = T)
if(!load){
# Initiate the similarity weight matrix
movie_UI         <- as.matrix(movie_UI)
movie_sim_weight <- matrix(NA, nrow = nrow(movie_UI), ncol = nrow(movie_UI))
# Calculate the pearson weights on the movie data
# The below took 87 minutes on my Macbook, 35 on my iMac
movie_sim <- calc_weight(movie_UI, run.pearson = T)
save(movie_sim, file = "./output/movie_sim.RData")
# Calculate the pearson weights on the MS data
# The below took 30 minutes on my Macbook and 14 on my iMac
MS_sim <- calc_weight(MS_UI, run.pearson = T)
save(MS_sim, file = "./output/MS_sim.RData")
# Calculate the entropy weights on the movie data
# The below took 46460 seconds
tm_movie_ent <- system.time(movie_ent <-
calc_weight(movie_UI, run.entropy = T))
save(movie_ent, file = "./output/movie_ent.RData")
# Calculate the entropy weights on the MS data
# The below took 51548 seconds
tm_MS_ent <- system.time(MS_ent <-
calc_weight(MS_UI, run.entropy = T))
save(MS_ent, file = "./output/MS_ent.RData")
# Calculate the spearman weights on the movie data
# The below took 3668.39s
tm_movie_spm <- system.time(movie_spm <-
calc_weight(movie_UI,run.spearman = T))
save(movie_spm, file = "./output/movie_spm.RData")
# Calculate the spearman weights on the MS data
# The below took 2071s
tm_MS_spm <- system.time(MS_spm <-
calc_weight(MS_UI, run.spearman = T))
save(MS_spm, file = "./output/MS_spm.RData")
# Calculate the cosin weights on the movie data
# The below took  20808 seconds
tm_movie_cos <- system.time(movie_cos <-
calc_weight(movie_UI,run.cosin = T))
save(movie_cos, file = "./output/movie_cos.RData")
# Calculate the cosin weights on the MS data
# The below took 13891 seconds
tm_MS_cos <- system.time(MS_cos <-
calc_weight(MS_UI, run.cosin = T))
save(MS_cos, file = "./output/MS_cos.RData")
# Calculate the squared difference weights on the movie data
# The below took  4606 seconds
tm_movie_sqd <- system.time(movie_sqd <-
calc_weight(movie_UI,run.sqdiff = T))
save(movie_sqd, file = "./output/movie_sqd.RData")
# Calculate the squared difference weights on the MS data
# The below took 1560 seconds
tm_MS_sqd <- system.time(MS_sqd <-
calc_weight(MS_UI, run.sqdiff = T))
save(MS_sqd, file = "./output/MS_sqd.RData")
}else{
load("./output/movie_sim.RData")
load("./output/MS_sim.RData")
load("./output/movie_ent.RData")
load("./output/MS_ent.RData")
load("./output/movie_sqd.RData")
load("./output/MS_sqd.RData")
load("./output/movie_cos.RData")
load("./output/MS_cos.RData")
load("./output/movie_spm.RData")
load("./output/MS_spm.RData")
}
load("./output/movie_spm.RData")
load("./output/MS_spm.RData")
calc_significance(movie_UI)
tm_movie_sig <- system.time(movie_sig <-
calc_significance(movie_UI))
tm_MS_sig <- system.time(MS_sig <-
calc_significance(MS_UI))
tm_MS_sig
save(MS_sig, file = "../output/MS_sig.RData")
save(MS_sig, file = "./output/MS_sig.RData")
MS_pred_spm <- pred_matrix(MS_UI, MS_spm_predict)
MS_pred_spm <- pred_matrix(MS_UI, MS_spm)
View(MS_spm)
save(MS_pred_spm, file = "./output/MS_pred_spm.RData")
movie_test_UI <- movie_data_transform(movie_test)
View(movie_data_transform)
View(movie_data_transform)
movie_data_transform(movie_test)
movie_test_UI <- movie_data_transform(movie_test)
save(movie_test_UI, file = "./output/movie_test_UI")
save(MS_test_UI, file = "./output/MS_test_UI.Rdata")
save(movie_test_UI, file = "./output/movie_test_UI.Rdata")
load("./output/MS_pred.RData")
setwd("/Users/wcheng/Desktop/Spring 2018/data science/project-3-algorithms-project-3-algorithms-group-2")
save(MS_test_UI, file = "./output/MS_test_UI.Rdata")
save(movie_test_UI, file = "./output/movie_test_UI.Rdata")
load("./output/MS_pred.RData")
getwd()
load("./output/MS_pred_spm.RData")
load("./output/MS_pred.Rdata")
dir_MS <- "/data/Proj3_Data/MS_sample/"
MS_test <- read.csv(paste(getwd(),dir_MS, "data_test.csv", sep = ""), as.is = TRUE, header = TRUE)
load("./output/MS_sqd.Rdata")
load("./output/MS_pred.Rdata")
load("./output/MS_pred.Rdata")
load("./output/MS_pred.Rdata")
getwd()
getwd()
getwd()
setwd("/Users/wcheng/Desktop/Spring 2018/data science/project-3-algorithms-project-3-algorithms-group-2")
load("./output/MS_pred.Rdata")
load("../output/MS_pred.Rdata")
save(movie_test_UI, file = "../output/movie_test_UI.Rdata")
MS_test_UI <- MS_data_transform(MS_test)
save(MS_test_UI, file = "../output/MS_test_UI.Rdata")
match_the_matrix <- function(small_matrix, full_matrix){
result <- full_matrix
for(i in 1:nrow(small_matrix)){
for(j in 1:ncol(small_matrix)){
if(small_matrix[i,j] != 0 & is.na(small_matrix[i,j])){
result[which(rownames(full_matrix) == rownames(small_matrix)[i]),
which(colnames(full_matrix) == colnames(small_matrix)[j])] <- small_matrix[i,j]
}
}
}
return(result)
}
MS_observed_UI <- match_the_matrix(MS_test_UI,MS_UI)
View(MS_observed_UI)
match_the_matrix <- function(small_matrix, full_matrix){
result <- full_matrix
for(i in 1:nrow(small_matrix)){
for(j in 1:ncol(small_matrix)){
if(small_matrix[i,j] != 0){
result[which(rownames(full_matrix) == rownames(small_matrix)[i]),
which(colnames(full_matrix) == colnames(small_matrix)[j])] <- small_matrix[i,j]
}
}
}
return(result)
}
MS_observed_UI <- match_the_matrix(MS_test_UI,MS_UI)
View(MS_observed_UI)
match_the_matrix <- function(small_matrix, full_matrix){
result <- full_matrix
for(i in 1:nrow(small_matrix)){
for(j in 1:ncol(small_matrix)){
if(small_matrix[i,j] != 0 & !is.na(small_matrix[i,j])){
result[which(rownames(full_matrix) == rownames(small_matrix)[i]),
which(colnames(full_matrix) == colnames(small_matrix)[j])] <- small_matrix[i,j]
}
}
}
return(result)
}
MS_observed_UI <- match_the_matrix(MS_test_UI,MS_UI)
View(MS_observed_UI)
movie_observed_UI <- match_the_matrix(movie_test_UI,movie_UI)
View(movie_observed_UI)
View(movie_UI)
save(MS_observed_UI, file = "../output/MS_observed_UI.Rdata")
save(movie_observed_UI, file = "../output/movie_observed_UI.Rdata")
alpha <- 5
ranked_scoring(MS_pred, MS_observed_UI,10)
source("../lib/functions.R")
ranked_scoring(MS_pred, MS_observed_UI,10)
ranked_scoring(movie_pred, movie_observed_UI,10)
load("../output/movie_pred.RData")
ranked_scoring(movie_pred, movie_observed_UI,10)
pred_matrix<- movie_pred
observed_matrix <- movie_observed_UI
i = 1
sorted_pred = sort(pred_matrix[i,], decreasing=TRUE)
sorted_pred
sum(is.na(sorted_pred))
sorted_obs = unlist(observed_matrix[i,][names(sorted_pred)])
sum(is.na(sorted_obs))
sorted_obs
denominator_mat = matrix(rep(2^(0:(ncol-1)/(alpha-1)), nrow), nrow, ncol, byrow=T)
ranked_mat = rank_matrix(pred_matrix, observed_matrix)
nrow = nrow(ranked_mat)
ncol = ncol(ranked_mat)
denominator_mat = matrix(rep(2^(0:(ncol-1)/(alpha-1)), nrow), nrow, ncol, byrow=T)
utility_matrix = ranked_mat/denominator_mat
r_a_vector = rowSums(utility_matrix)
View(utility_matrix)
ranked_scoring(MS_pred, MS_observed_UI,10)
ranked_scoring(MS_pred, MS_observed_UI,10)
ranked_scoring(MS_pred_spm, MS_observed_UI,10)
ranked_scoring(MS_pred_spm, MS_observed_UI,10)
MAE(movie_pred,movie_observed_UI)
result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
result = rep(0,nrow(observed_matrix))
result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
abs(pred_matrix[i,] - observed_matrix[i,])
result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= NA)
ifelse(observed_matrix==NA, 0,observed_matrix)
ifelse(is.na(observed_matrix), 0,observed_matrix)
observed_matrix <- ifelse(is.na(observed_matrix), 0,observed_matrix)
result = rep(0,nrow(observed_matrix))
result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
source("../lib/functions.R")
MAE(movie_pred,movie_observed_UI)
MAE(pred_matrix,observed_matrix)
View(observed_matrix)
sum(observed_matrix[i,]!= 0)
sum(abs(pred_matrix[i,] - observed_matrix[i,]))
pred_matrix <- movie_pred
sum(abs(pred_matrix[i,] - observed_matrix[i,]))
mean(abs(movie_pred - movie_observed_UI), na.rm = T)
for(i in 1:nrow(observed_matrix)){
# Calculate the average absoluate deviation for each user
result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
}
mean(result)
count = 0
result = 0
for(i in 1:nrow(observed_matrix)){
for(j in 1:ncol(observed_matrix)){
if(!is.na(observed_matrix)){
result = result + abs(pred_matrix[i,j]-observed_matrix[i,j])
count =count +1
}
}
# # Calculate the average absoluate deviation for each user
# result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
}
observed_matrix <- movie_observed_UI
count = 0
result = 0
for(i in 1:nrow(observed_matrix)){
for(j in 1:ncol(observed_matrix)){
if(!is.na(observed_matrix)){
result = result + abs(pred_matrix[i,j]-observed_matrix[i,j])
count =count +1
}
}
# # Calculate the average absoluate deviation for each user
# result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
}
i= 1
j=1
?mean
for(i in 1:nrow(observed_matrix)){
for(j in 1:ncol(observed_matrix)){
if(!is.na(observed_matrix[i,j])){
result = result + abs(pred_matrix[i,j]-observed_matrix[i,j])
count =count +1
}
}
# # Calculate the average absoluate deviation for each user
# result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
}
pred_matrix[i,j]
observed_matrix[i,j]
for(i in 1:nrow(observed_matrix)){
for(j in 1:ncol(observed_matrix)){
if(!is.na(observed_matrix[i,j])){
result = result + abs(pred_matrix[i,j]-observed_matrix[i,j])
count =count +1
}
}
# # Calculate the average absoluate deviation for each user
# result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
}
for(i in 1:nrow(observed_matrix)){
for(j in 1:ncol(observed_matrix)){
if(!is.na(observed_matrix[i,j])){
result = result + abs(pred_matrix[i,j]-observed_matrix[i,j])
count =count +1
}
print(i)
}
# # Calculate the average absoluate deviation for each user
# result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
}
for(i in 1:nrow(observed_matrix)){
for(j in 1:ncol(observed_matrix)){
if(!is.na(observed_matrix[i,j])){
result = result + abs(pred_matrix[i,j]-observed_matrix[i,j])
count =count +1
}
}
# # Calculate the average absoluate deviation for each user
# result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
}
count = 0
result = 0
for(i in 1:nrow(observed_matrix)){
for(j in 1:ncol(observed_matrix)){
if(!is.na(observed_matrix[i,j])){
result = result + abs(pred_matrix[i,j]-observed_matrix[i,j])
count =count +1
}
}
# # Calculate the average absoluate deviation for each user
# result[i] <- sum(abs(pred_matrix[i,] - observed_matrix[i,]))/sum(observed_matrix[i,]!= 0)
}
result/count
example <- MS_UI[1:100,1:1000]
dim(MS_UI)
calc_weight(example,run.cosin = T)
example <- MS_UI[1:1000,1:100]
calc_weight(example,run.cosin = T)
example_cos <- calc_weight(example,run.cosin = T)
example <- MS_UI[1:10,1:10]
example_cos <- calc_weight(example,run.cosin = T)
example_spm <- calc_weight(example,run.spearman = T)
example_cos <- calc_weight(example,run.cosin = T)
exmaple_cos <- calc_weight(example,run.cosin = T)
example_spm <- calc_weight(example,run.spearman = T)
View(example_spm)
View(example_cos)
example <- MS_UI[1:100,1:100]
exmaple_cos <- calc_weight(example,run.cosin = T)
View(example_cos)
example_cos <- calc_weight(example,run.cosin = T)
example_spm <- calc_weight(example,run.spearman = T)
View(example_spm)
View(exmaple_cos)
example_sqd <- calc_weight(example,run.sqdiff = T)
example_ent <- calc_weight(example, run.entropy = T)
example_sig <- calc_significance(example)
View(example_sig)
View(example_sig)
example <- MS_UI[1:100,]
example_sig <- calc_significance()
example_sig <- calc_significance(example)
View(example_sig)
ranked_scoring(MS_pred, MS_observed_UI,10)
ranked_scoring(MS_pred_spm, MS_observed_UI,10)
ranked_scoring(MS_pred_sqd, MS_observed_UI,10)
load("../output/MS_pred_sqd.RData")
MAE(movie_pred,movie_observed_UI)
ranked_scoring(MS_pred_sqd, MS_observed_UI,10)
d=0.02
source("../lib/functions.R")
ranked_scoring(MS_pred, MS_observed_UI,10)
ranked_scoring(MS_pred, MS_observed_UI,10,d=0.02)
rank_score <- function(predicted_test,true_test){
## function to calculate rank score of predicted value
## input: predicted_test - predicted value matrix of test data
##        true_test - test data matrix
## output: rank score
d <- 0.02
rank_mat_pred <- ncol(predicted_test)+1-t(apply(predicted_test,1,function(x){return(rank(x,ties.method = 'first'))}))
rank_mat_test <- ncol(true_test)+1-t(apply(true_test,1,function(x){return(rank(x,ties.method = 'first'))}))
vec = ifelse(true_test - d > 0, true_test - d, 0)
R_a <- apply(1/(2^((rank_mat_pred-1)/4)) * vec,1,sum)
R_a_max <- apply(1/(2^((rank_mat_test-1)/4)) * vec,1,sum)
R <- 100*sum(R_a)/sum(R_a_max)
return(R)
}
ranked_scoring(MS_pred, MS_observed_UI)
rank_score(MS_pred, MS_observed_UI)
View(MS_pred)
View(MS_observed_UI)
