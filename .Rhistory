}
View(s_user)
s_user <- diag(x = 1, nrow(data), nrow(data))
s_obj <- diag(x = 1, ncol(data), ncol(data))
for(i in 1:(nrow(data)-1)) {
s_user[i, i:nrow(s_user) ] <- apply(data[i:nrow(data),], 1, f1, data[i, ])
}
for(i in 1:(nrow(data)-1)) {
s_user[i, i:nrow(s_user) ] <- apply(data[i:nrow(data),], 1, f1, data[i, ])
}
diag(s_user) <- 1
s_user <- as.matrix(Matrix::forceSymmetric(s_user, uplo = "U"))
for(i in 1:(ncol(data)-1)) {
s_obj[i, i:ncol(s_obj) ] <- apply(data[,i:ncol(data)], 2, f2, data[, i])
}
diag(s_obj) <- 1
s_obj <- as.matrix(Matrix::forceSymmetric(s_obj, uplo = "U"))
View(s_user)
View(s_obj)
View(s_obj)
View(data)
len_a <- sum(colA)
0*0==0
f2 <- function(colA, colB){
p_obj <- colA %*% t(colB)
len_a <- sum(colA)
len_b <- sum(colB)
if(len_a * len_b == 0){
return(0)
}else{
return(sum(s_user * p_obj) * C2/(len_a * len_b))
}
}
s_user <- diag(x = 1, nrow(data), nrow(data))
s_obj <- diag(x = 1, ncol(data), ncol(data))
for(i in 1:(ncol(data)-1)) {
s_obj[i, i:ncol(s_obj) ] <- apply(data[,i:ncol(data)], 2, f2, data[, i])
}
View(s_obj)
f1 <- function(rowA, rowB){
p_user <- rowA %*% t(rowB)
len_x <- sum(rowA)
len_y <- sum(rowB)
if(len_x * len_y ==0){
return(0)
}else{
return(sum(s_obj * p_user)*C1/(len_x*len_y))
}
}
f2 <- function(colA, colB){
p_obj <- colA %*% t(colB)
len_a <- sum(colA)
len_b <- sum(colB)
if(len_a * len_b == 0){
return(0)
}else{
return(sum(s_user * p_obj) * C2/(len_a * len_b))
}
}
for(k in 1:K){
# Run a loop and use apply function to update the scores using f1 and f2.
for(i in 1:(nrow(data)-1)) {
s_user[i, i:nrow(s_user) ] <- apply(data[i:nrow(data),], 1, f1, data[i, ])
}
diag(s_user) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_user <- as.matrix(Matrix::forceSymmetric(s_user, uplo = "U"))
for(i in 1:(ncol(data)-1)) {
s_obj[i, i:ncol(s_obj) ] <- apply(data[,i:ncol(data)], 2, f2, data[, i])
}
diag(s_obj) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_obj <- as.matrix(Matrix::forceSymmetric(s_obj, uplo = "U"))
print(K)
}
View(s_obj)
View(s_user)
data <- movie_UI[1:100,]
data <- ifelse(is.na(data), 0, 1)
s_user <- diag(x = 1, nrow(data), nrow(data))
s_obj <- diag(x = 1, ncol(data), ncol(data))
for(k in 1:K){
# Run a loop and use apply function to update the scores using f1 and f2.
for(i in 1:(nrow(data)-1)) {
s_user[i, i:nrow(s_user) ] <- apply(data[i:nrow(data),], 1, f1, data[i, ])
}
diag(s_user) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_user <- as.matrix(Matrix::forceSymmetric(s_user, uplo = "U"))
for(i in 1:(ncol(data)-1)) {
s_obj[i, i:ncol(s_obj) ] <- apply(data[,i:ncol(data)], 2, f2, data[, i])
}
diag(s_obj) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_obj <- as.matrix(Matrix::forceSymmetric(s_obj, uplo = "U"))
print(K)
}
for(k in 1:K){
# Run a loop and use apply function to update the scores using f1 and f2.
for(i in 1:(nrow(data)-1)) {
s_user[i, i:nrow(s_user) ] <- apply(data[i:nrow(data),], 1, f1, data[i, ])
print(i)
}
diag(s_user) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_user <- as.matrix(Matrix::forceSymmetric(s_user, uplo = "U"))
for(i in 1:(ncol(data)-1)) {
s_obj[i, i:ncol(s_obj) ] <- apply(data[,i:ncol(data)], 2, f2, data[, i])
}
diag(s_obj) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_obj <- as.matrix(Matrix::forceSymmetric(s_obj, uplo = "U"))
print(K)
}
View(s_user)
View(s_obj)
K <- 1
simrank(data)
simrank <- function(data){
data <- ifelse(is.na(data), 0, 1)
# First construct the user and object score matrix
s_user <- diag(x = 1, nrow(data), nrow(data))
s_obj <- diag(x = 1, ncol(data), ncol(data))
# f1 update the scores of userA and userB based on the current object score matrix
f1 <- function(rowA, rowB){
p_user <- rowA %*% t(rowB)
len_x <- sum(rowA)
len_y <- sum(rowB)
if(len_x * len_y ==0){
return(0)
}else{
return(sum(s_obj * p_user)*C1/(len_x*len_y))
}
}
# f2 update the scores of objA and objB based on the current user score matrix
f2 <- function(colA, colB){
p_obj <- colA %*% t(colB)
len_a <- sum(colA)
len_b <- sum(colB)
if(len_a * len_b == 0){
return(0)
}else{
return(sum(s_user * p_obj) * C2/(len_a * len_b))
}
}
# Iteratively calculate the two matrices, K = 5
for(k in 1:K){
# Run a loop and use apply function to update the scores using f1 and f2.
for(i in 1:(nrow(data)-1)) {
s_user[i, i:nrow(s_user) ] <- apply(data[i:nrow(data),], 1, f1, data[i, ])
print(i)
}
diag(s_user) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_user <- as.matrix(Matrix::forceSymmetric(s_user, uplo = "U"))
for(i in 1:(ncol(data)-1)) {
s_obj[i, i:ncol(s_obj) ] <- apply(data[,i:ncol(data)], 2, f2, data[, i])
}
diag(s_obj) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_obj <- as.matrix(Matrix::forceSymmetric(s_obj, uplo = "U"))
print(c("K=",K))
}
return(s_user)
}
system.time(simrank(data))
system.time(simrank(movie_UI))
3.211e+04
32110/3600
compute_user_cum_movie_sum = function(m1,m2,
Movie_Matrix_ = Movie_Matrix) {
return(Movie_Matrix_[m1,m2])
}
compute_user_sim = function(j, k, iter = i,
train_adj_ = train_adj,
Movie_Matrix_ = Movie_Matrix,
Users_ = Users,
Movies_ = Movies) {
if (j == k) {
return(1)
} else {
moviesj = train_adj_$Movie[which(train_adj_$User == Users_[j])]
moviesk = train_adj_$Movie[which(train_adj_$User == Users_[k])]
# Pruning
if (length(moviesj) + length(moviesk) -
length(unique(c(moviesj,moviesk))) <= 0.25 * length(moviesj)) {
return(0)
}
# First Iter
if (iter == 1) {
return((length(moviesj) + length(moviesk) -
length(unique(c(moviesj,moviesk)))) * 0.8 / length(moviesk) / length(moviesj))
}
m1s = match(sort(rep(moviesj,length(moviesk))),Movies_)
m2s = match(rep(moviesk,length(moviesj)),Movies_)
mins = (m1s+m2s - sqrt((m1s-m2s)^2) )/2
maxs = (m1s+m2s + sqrt((m1s-m2s)^2) )/2
cum_sum = sum(mapply(compute_user_cum_movie_sum,
m1 = maxs,
m2 = mins), na.rm=T)
cum_sum = cum_sum * 0.8 / length(mins)
return(cum_sum)
}
}
compute_movie_cum_user_sum = function(m1,m2,
User_Matrix_ = User_Matrix) {
return(User_Matrix_[m1,m2])
}
compute_movie_sim = function(j, k,
train_adj_ = train_adj,
User_Matrix_ = User_Matrix,
Users_ = Users,
Movies_ = Movies) {
if (j == k) {
return(1)
} else {
usersj = train_adj_$User[which(train_adj_$Movie == Movies_[j])]
usersk = train_adj_$User[which(train_adj_$Movie == Movies_[k])]
if (length(usersj) + length(usersk) -
length(unique(c(usersj,usersk))) <= 0.25 * length(usersj)) {
return(0)
}
m1s = match(sort(rep(usersj,length(usersk))),Users_)
m2s = match(rep(usersk,length(usersj)),Users_)
mins = (m1s+m2s - sqrt((m1s-m2s)^2) )/2
maxs = (m1s+m2s + sqrt((m1s-m2s)^2) )/2
cum_sum = sum(mapply(compute_movie_cum_user_sum,
m1 = maxs,
m2 = mins),na.rm=T)
cum_sum = cum_sum * 0.8 / length(mins)
return(cum_sum)
}
}
getwd()
setwd("/Users/wcheng/Desktop/Spring 2018/data science/project-3-algorithms-project-3-algorithms-group-2")
generate_simrank_rdata = function(filename="simrank_matrix") {
train = read.csv("../data/eachmovie_sample/data_train.csv")
test = read.csv("../data/eachmovie_sample/data_test.csv")
train$rescore = 0
train$rescore[which(train$Score >= 6)] = 1
train_adj = train[which(train$rescore ==1),]
Movies = sort(unique(train_adj$Movie))
Users = unique(train_adj$User)
Movie_Matrix = diag(length(Movies))
User_Matrix = diag(length(Users))
for( i in 1:5 ) {
print(paste0("i = ",i))
for (j in 1:length(Users)) {
if (j %% 100 == 0) {
print(Sys.time())
print(paste0("Users j=",j))
}
User_Matrix[j,1:j] = mapply(compute_user_sim,j=j,k=1:j)
}
for (j in 1:length(Movies)) {
if (j %% 50 == 0) {
print(Sys.time())
print(paste0("Movies j=",j))
}
Movie_Matrix[j,1:j] = mapply(compute_movie_sim,j=j,k=1:j)
}
}
User_Matrix[upper.tri(User_Matrix)] <- t(User_Matrix)[upper.tri(User_Matrix)]
save(User_Matrix,Users,file=paste0("../output/",filename,".RData"))
}
select_nth_largest = function(x,n=10) {
return(sort(x,decreasing=T)[n])
}
create_neighbors_matrix_movies = function(movie_cor_matrix,n_neighbors) {
neighbors = apply(X = movie_cor_matrix,MARGIN = 1, FUN = select_nth_largest,n = n_neighbors)
res = matrix(NA,nrow = nrow(movie_cor_matrix),ncol = n_neighbors)
rownames(res) = rownames(movie_cor_matrix)
for (i in 1:nrow(res))
res[i,] = names(which(movie_cor_matrix[i,] >= neighbors[i]))
return(res)
}
computeZScore_Movie <- function(weights=weights_, neighbors=neighbors_, df=tmp_, a, i){
neighbors_a <- neighbors[toString(a), ]
num <- rep(0, length(neighbors_a))
for (u in 1:length(neighbors_a)){
neighborU <- neighbors_a[u]
r_ui <- df[toString(neighborU), toString(i)]
r_u <- mean(as.numeric(df[neighborU, ]))
sd_u <- sd(as.numeric(df[neighborU, ]))
if (toString(a) %in% rownames(weights) & neighborU %in% colnames(weights)) {
w_au <- weights[toString(a), neighborU]
} else {
w_au = 0
}
num[u] <- (r_ui - r_u)/sd_u * w_au
}
if (toString(a) %in% rownames(weights)) {
tmp_a = which(neighbors_a %in% colnames(weights))
w_a <- sum(weights[toString(a), tmp_a])
} else {
w_au = 1
}
sd_a <- sd(df[toString(a), ])
r_a <- mean(as.numeric(df[toString(a),]))
p_ai <- r_a + sd_a * sum(num)/w_a
return (p_ai)
}
setwd("/Users/wcheng/Desktop/Spring 2018/data science/project-3-algorithms-project-3-algorithms-group-2")
train = read.csv("./data/eachmovie_sample/data_train.csv")
getwd()
getwd()
train = read.csv("./proj3_data/data/eachmovie_sample/data_train.csv")
train = read.csv("./Proj3_Data/data/eachmovie_sample/data_train.csv")
train = read.csv("./data/Proj3_Data/eachmovie_sample/data_train.csv")
generate_simrank_rdata = function(filename="simrank_matrix") {
train = read.csv("./data/Proj3_Data/eachmovie_sample/data_train.csv")
test = read.csv("./data/Proj3_Data/eachmovie_sample/data_test.csv")
train$rescore = 0
train$rescore[which(train$Score >= 6)] = 1
train_adj = train[which(train$rescore ==1),]
Movies = sort(unique(train_adj$Movie))
Users = unique(train_adj$User)
Movie_Matrix = diag(length(Movies))
User_Matrix = diag(length(Users))
for( i in 1:5 ) {
print(paste0("i = ",i))
for (j in 1:length(Users)) {
if (j %% 100 == 0) {
print(Sys.time())
print(paste0("Users j=",j))
}
User_Matrix[j,1:j] = mapply(compute_user_sim,j=j,k=1:j)
}
for (j in 1:length(Movies)) {
if (j %% 50 == 0) {
print(Sys.time())
print(paste0("Movies j=",j))
}
Movie_Matrix[j,1:j] = mapply(compute_movie_sim,j=j,k=1:j)
}
}
User_Matrix[upper.tri(User_Matrix)] <- t(User_Matrix)[upper.tri(User_Matrix)]
save(User_Matrix,Users,file=paste0("../output/",filename,".RData"))
}
generate_simrank_rdata()
train = read.csv("./data/Proj3_Data/eachmovie_sample/data_train.csv")
test = read.csv("./data/Proj3_Data/eachmovie_sample/data_test.csv")
train$rescore = 0
train$rescore[which(train$Score >= 6)] = 1
train_adj = train[which(train$rescore ==1),]
Movies = sort(unique(train_adj$Movie))
Users = unique(train_adj$User)
Movie_Matrix = diag(length(Movies))
User_Matrix = diag(length(Users))
for( i in 1:5 ) {
print(paste0("i = ",i))
for (j in 1:length(Users)) {
if (j %% 100 == 0) {
print(Sys.time())
print(paste0("Users j=",j))
}
User_Matrix[j,1:j] = mapply(compute_user_sim,j=j,k=1:j)
}
for (j in 1:length(Movies)) {
if (j %% 50 == 0) {
print(Sys.time())
print(paste0("Movies j=",j))
}
Movie_Matrix[j,1:j] = mapply(compute_movie_sim,j=j,k=1:j)
}
}
View(train)
dim(train)
View(train)
train <- train[,1:1000]
train = read.csv("./data/Proj3_Data/eachmovie_sample/data_train.csv")
test = read.csv("./data/Proj3_Data/eachmovie_sample/data_test.csv")
train <- train[,1:1000]
train[,3]
train <- train[1:1000,]
test <- test[1:1000,]
train$rescore = 0
train$rescore[which(train$Score >= 6)] = 1
train_adj = train[which(train$rescore ==1),]
Movies = sort(unique(train_adj$Movie))
Users = unique(train_adj$User)
Movie_Matrix = diag(length(Movies))
User_Matrix = diag(length(Users))
for( i in 1:5 ) {
print(paste0("i = ",i))
for (j in 1:length(Users)) {
if (j %% 100 == 0) {
print(Sys.time())
print(paste0("Users j=",j))
}
User_Matrix[j,1:j] = mapply(compute_user_sim,j=j,k=1:j)
}
for (j in 1:length(Movies)) {
if (j %% 50 == 0) {
print(Sys.time())
print(paste0("Movies j=",j))
}
Movie_Matrix[j,1:j] = mapply(compute_movie_sim,j=j,k=1:j)
}
}
User_Matrix[upper.tri(User_Matrix)] <- t(User_Matrix)[upper.tri(User_Matrix)]
View(User_Matrix)
train = read.csv("./data/Proj3_Data/eachmovie_sample/data_train.csv")
test = read.csv("./data/Proj3_Data/eachmovie_sample/data_test.csv")
View(train)
train <- train[1:10000,]
test <- test[1:10000,]
train$rescore = 0
train$rescore[which(train$Score >= 6)] = 1
train_adj = train[which(train$rescore ==1),]
Movies = sort(unique(train_adj$Movie))
Users = unique(train_adj$User)
Movie_Matrix = diag(length(Movies))
User_Matrix = diag(length(Users))
for( i in 1:5 ) {
print(paste0("i = ",i))
for (j in 1:length(Users)) {
if (j %% 100 == 0) {
print(Sys.time())
print(paste0("Users j=",j))
}
User_Matrix[j,1:j] = mapply(compute_user_sim,j=j,k=1:j)
}
for (j in 1:length(Movies)) {
if (j %% 50 == 0) {
print(Sys.time())
print(paste0("Movies j=",j))
}
Movie_Matrix[j,1:j] = mapply(compute_movie_sim,j=j,k=1:j)
}
}
View(User_Matrix)
train = read.csv("./data/Proj3_Data/eachmovie_sample/data_train.csv")
test = read.csv("./data/Proj3_Data/eachmovie_sample/data_test.csv")
train$rescore = 0
train$rescore[which(train$Score >= 6)] = 1
train_adj = train[which(train$rescore ==1),]
Movies = sort(unique(train_adj$Movie))
Users = unique(train_adj$User)
Movie_Matrix = diag(length(Movies))
User_Matrix = diag(length(Users))
for( i in 1:5 ) {
print(paste0("i = ",i))
for (j in 1:length(Users)) {
if (j %% 100 == 0) {
print(Sys.time())
print(paste0("Users j=",j))
}
User_Matrix[j,1:j] = mapply(compute_user_sim,j=j,k=1:j)
}
for (j in 1:length(Movies)) {
if (j %% 50 == 0) {
print(Sys.time())
print(paste0("Movies j=",j))
}
Movie_Matrix[j,1:j] = mapply(compute_movie_sim,j=j,k=1:j)
}
}
dim(User_Matrix)
User_Matrix[1,]
View(User_Matrix)
save(User_Matrix, "./output/movie_simrank.Rdata")
MS_test <- read.csv(paste(getwd(),dir_MS, "data_test.csv", sep = ""), as.is = TRUE, header = TRUE)
setwd("/Users/wcheng/Desktop/Spring 2018/data science/project-3-algorithms-project-3-algorithms-group-2")
save(User_Matrix, "./output/movie_simrank.Rdata")
getwd()
save(User_Matrix, file = "./output/movie_simrank.Rdata")
load("../output/movie_simrank.RData")
load("../output/movie_sig.RData")
dim(movie_sig)
dim(movie_simrank)
movie_simrank <- User_Matrix
dim(movie_simrank)
View(movie_simrank)
temp <- matrix(NA, 5055, 5055)
temp[1:5004, 1:5004] <- movie_simrank
temp[5005:5055, 5005:5055] <- 0
dim(temp)
save(movie_simrank, file = "./output/movie_simrank1.Rdata")
movie_simrank <- temp
save(movie_simrank, file = "./output/movie_simrank.Rdata")
source("../lib/functions.R")
source("../lib/simrank.R")
load("../output/movie_simrank.RData")
movie_pred_simrank <- pred_matrix(movie_UI, movie_simrank)
load("../output/MS_UI.Rdata")
load("../output/movie_UI.Rdata")
movie_pred_simrank <- pred_matrix(movie_UI, movie_simrank)
View(movie_pred_simrank)
K = 0.01/0.005
K = exp(0.01)/exp(0.005)
S = 0.9
q = 0.005
r = 0.01
r1 = 0.05
profit <- S*exp(-q)-K*exp(-r1)
profit <- S*exp(-q)-K*exp(-r1) * 1000000
profit <- S*exp(-q)-K*exp(-r1)
profit <- (S*exp(-q)-K*exp(-r1))*1000000
pnls <- (S-1)*exp(-q)
pnls <- (S-1)*exp(-q)*1000000
profit <- (S*exp(-q)-K*exp(-r1))
profit <- (S*exp(-q)-K*exp(-r1))*1000000
pnlr <-  K*(exp(-r)-exp(-r1))
pnlr <-  K*(exp(-r)-exp(-r1))*1000000
profit-pnls-pnlr
unexplained <- profit-pnls-pnlr
un<- profit-pnls-pnlr
un*10^11
save(movie_pred_simrank, file = "../output/movie_pred_simrank.Rdata")
setwd("/Users/wcheng/Desktop/Spring 2018/data science/project-3-algorithms-project-3-algorithms-group-2")
save(movie_pred_simrank, file = "./output/movie_pred_simrank.Rdata")
