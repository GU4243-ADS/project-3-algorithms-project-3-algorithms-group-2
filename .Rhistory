diag(s_user) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_user <- as.matrix(Matrix::forceSymmetric(s_user, uplo = "U"))
for(i in 1:(ncol(data))) {
# s_obj[i, i:ncol(s_obj) ] <- apply(data[,i:ncol(data)], 2, f2, data[, i])
s_obj[i,] <- apply(data, 2, f2, data[, i])
}
diag(s_obj) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
# s_obj <- as.matrix(Matrix::forceSymmetric(s_obj, uplo = "U"))
print(c("k=",k))
}
return(s_user)
}
simrank(data)
s_user <- diag(x = 1, nrow(data), nrow(data))
s_obj <- diag(x = 1, ncol(data), ncol(data))
for(k in 1:K){
# Run a loop and use apply function to update the scores using f1 and f2.
for(i in 1:(nrow(data)-1)) {
s_user[i, i:nrow(s_user) ] <- apply(data[i:nrow(data),], 1, f1, data[i, ])
if( i %% 10==0){
print(i)
}
}
diag(s_user) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_user <- as.matrix(Matrix::forceSymmetric(s_user, uplo = "U"))
for(i in 1:(ncol(data))) {
# s_obj[i, i:ncol(s_obj) ] <- apply(data[,i:ncol(data)], 2, f2, data[, i])
s_obj[i,] <- apply(data, 2, f2, data[, i])
}
diag(s_obj) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
# s_obj <- as.matrix(Matrix::forceSymmetric(s_obj, uplo = "U"))
print(c("k=",k))
}
s_user
simrank <- function(data){
data <- ifelse(is.na(data), 0, 1)
# First construct the user and object score matrix
s_user <- diag(x = 1, nrow(data), nrow(data))
s_obj <- diag(x = 1, ncol(data), ncol(data))
# Iteratively calculate the two matrices, K = 5
for(k in 1:K){
# Run a loop and use apply function to update the scores using f1 and f2.
for(i in 1:(nrow(data)-1)) {
s_user[i, i:nrow(s_user) ] <- apply(data[i:nrow(data),], 1, f1, data[i, ])
if( i %% 10==0){
print(i)
}
}
diag(s_user) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_user <- as.matrix(Matrix::forceSymmetric(s_user, uplo = "U"))
for(i in 1:(ncol(data)-1)) {
s_obj[i, i:ncol(s_obj) ] <- apply(data[,i:ncol(data)], 2, f2, data[, i])
}
diag(s_obj) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
# s_obj <- as.matrix(Matrix::forceSymmetric(s_obj, uplo = "U"))
print(c("k=",k))
print(s_user)
}
return(s_user)
}
simrank(data)
simrank <- function(data){
data <- ifelse(is.na(data), 0, 1)
# First construct the user and object score matrix
s_user <- diag(x = 1, nrow(data), nrow(data))
s_obj <- diag(x = 1, ncol(data), ncol(data))
# Iteratively calculate the two matrices, K = 5
for(k in 1:K){
# Run a loop and use apply function to update the scores using f1 and f2.
for(i in 1:(nrow(data)-1)) {
s_user[i, i:nrow(s_user) ] <- apply(data[i:nrow(data),], 1, f1, data[i, ])
if( i %% 10==0){
print(i)
}
}
diag(s_user) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_user <- as.matrix(Matrix::forceSymmetric(s_user, uplo = "U"))
for(i in 1:(ncol(data)-1)) {
s_obj[i, i:ncol(s_obj) ] <- apply(data[,i:ncol(data)], 2, f2, data[, i])
}
diag(s_obj) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
# s_obj <- as.matrix(Matrix::forceSymmetric(s_obj, uplo = "U"))
print(c("k=",k))
print(s_user)
}
return(s_user)
}
simrank(data)
s_obj <- diag(x = 1, ncol(data), ncol(data))
simrank <- function(data){
# First construct the user and object score matrix
s_user <- diag(x = 1, nrow(data), nrow(data))
s_obj <- diag(x = 1, ncol(data), ncol(data))
# Iteratively calculate the two matrices, K = 5
for(k in 1:K){
# Run a loop and use apply function to update the scores using f1 and f2.
for(i in 1:(nrow(data)-1)) {
s_user[i, i:nrow(s_user) ] <- apply(data[i:nrow(data),], 1, f1, data[i, ])
if( i %% 10==0){
print(i)
}
}
diag(s_user) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_user <- as.matrix(Matrix::forceSymmetric(s_user, uplo = "U"))
for(i in 1:(ncol(data)-1)) {
s_obj[i, i:ncol(s_obj) ] <- apply(data[,i:ncol(data)], 2, f2, data[, i])
}
diag(s_obj) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
# s_obj <- as.matrix(Matrix::forceSymmetric(s_obj, uplo = "U"))
print(c("k=",k))
print(s_user)
}
return(s_user)
}
simrank(data)
f1 <- function(rowA, rowB,s_obj){
p_user <- rowA %*% t(rowB)
# if(sum(p_user) < 0.3* nrow(p_user)*nrow(p_user)){
#   return(0)
# }else{
len_x <- sum(rowA)
len_y <- sum(rowB)
if(len_x * len_y ==0){
return(0)
}else{
return(sum(s_obj * p_user)*C1/(len_x*len_y))
# }
}
}
f2 <- function(colA, colB,s_user){
p_obj <- colA %*% t(colB)
len_a <- sum(colA)
len_b <- sum(colB)
if(len_a * len_b == 0){
return(0)
}else{
return(sum(s_user * p_obj) * C2/(len_a * len_b))
}
}
simrank <- function(data){
# First construct the user and object score matrix
s_user <- diag(x = 1, nrow(data), nrow(data))
s_obj <- diag(x = 1, ncol(data), ncol(data))
# Iteratively calculate the two matrices, K = 5
for(k in 1:K){
# Run a loop and use apply function to update the scores using f1 and f2.
for(i in 1:(nrow(data)-1)) {
s_user[i, i:nrow(s_user) ] <- apply(data[i:nrow(data),], 1, f1, data[i, ])
if( i %% 10==0){
print(i)
}
}
diag(s_user) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_user <- as.matrix(Matrix::forceSymmetric(s_user, uplo = "U"))
for(i in 1:(ncol(data)-1)) {
s_obj[i, i:ncol(s_obj) ] <- apply(data[,i:ncol(data)], 2, f2, data[, i])
}
diag(s_obj) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
# s_obj <- as.matrix(Matrix::forceSymmetric(s_obj, uplo = "U"))
print(c("k=",k))
print(s_user)
}
return(s_user)
}
simrank(data)
simrank <- function(data){
# First construct the user and object score matrix
s_user <- diag(x = 1, nrow(data), nrow(data))
s_obj <- diag(x = 1, ncol(data), ncol(data))
# Iteratively calculate the two matrices, K = 5
for(k in 1:K){
# Run a loop and use apply function to update the scores using f1 and f2.
for(i in 1:(nrow(data)-1)) {
s_user[i, i:nrow(s_user) ] <- apply(data[i:nrow(data),], 1, f1, data[i, ],s_obj)
if( i %% 10==0){
print(i)
}
}
diag(s_user) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_user <- as.matrix(Matrix::forceSymmetric(s_user, uplo = "U"))
for(i in 1:(ncol(data)-1)) {
s_obj[i, i:ncol(s_obj) ] <- apply(data[,i:ncol(data)], 2, f2, data[, i],s_user)
}
diag(s_obj) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
# s_obj <- as.matrix(Matrix::forceSymmetric(s_obj, uplo = "U"))
print(c("k=",k))
print(s_user)
}
return(s_user)
}
simrank(data)
temp <- simrank(MS_UI[1:100,])
f1 <- function(rowA, rowB,s_obj){
p_user <- rowA %*% t(rowB)
if(sum(p_user) < 0.3* nrow(p_user)*nrow(p_user)){
return(0)
}else{
len_x <- sum(rowA)
len_y <- sum(rowB)
if(len_x * len_y ==0){
return(0)
}else{
return(sum(s_obj * p_user)*C1/(len_x*len_y))
}
}
}
f2 <- function(colA, colB,s_user){
p_obj <- colA %*% t(colB)
len_a <- sum(colA)
len_b <- sum(colB)
if(len_a * len_b == 0){
return(0)
}else{
return(sum(s_user * p_obj) * C2/(len_a * len_b))
}
}
simrank <- function(data){
# First construct the user and object score matrix
s_user <- diag(x = 1, nrow(data), nrow(data))
s_obj <- diag(x = 1, ncol(data), ncol(data))
# Iteratively calculate the two matrices, K = 5
for(k in 1:K){
# Run a loop and use apply function to update the scores using f1 and f2.
for(i in 1:(nrow(data)-1)) {
s_user[i, i:nrow(s_user) ] <- apply(data[i:nrow(data),], 1, f1, data[i, ],s_obj)
if( i %% 10==0){
print(i)
}
}
diag(s_user) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_user <- as.matrix(Matrix::forceSymmetric(s_user, uplo = "U"))
for(i in 1:(ncol(data)-1)) {
s_obj[i, i:ncol(s_obj) ] <- apply(data[,i:ncol(data)], 2, f2, data[, i],s_user)
}
diag(s_obj) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
# s_obj <- as.matrix(Matrix::forceSymmetric(s_obj, uplo = "U"))
print(c("k=",k))
print(s_user)
}
return(s_user)
}
temp <- simrank(MS_UI[1:100,])
f1 <- function(rowA, rowB,s_obj){
p_user <- rowA %*% t(rowB)
if(sum(p_user) < 0.1* nrow(p_user)*nrow(p_user)){
return(0)
}else{
len_x <- sum(rowA)
len_y <- sum(rowB)
if(len_x * len_y ==0){
return(0)
}else{
return(sum(s_obj * p_user)*C1/(len_x*len_y))
}
}
}
f1 <- function(rowA, rowB,s_obj){
p_user <- rowA %*% t(rowB)
# if(sum(p_user) < 0.1* nrow(p_user)*nrow(p_user)){
#   return(0)
# }else{
len_x <- sum(rowA)
len_y <- sum(rowB)
if(len_x * len_y ==0){
return(0)
}else{
return(sum(s_obj * p_user)*C1/(len_x*len_y))
# }
}
}
f2 <- function(colA, colB,s_user){
p_obj <- colA %*% t(colB)
len_a <- sum(colA)
len_b <- sum(colB)
if(len_a * len_b == 0){
return(0)
}else{
return(sum(s_user * p_obj) * C2/(len_a * len_b))
}
}
simrank <- function(data){
# First construct the user and object score matrix
s_user <- diag(x = 1, nrow(data), nrow(data))
s_obj <- diag(x = 1, ncol(data), ncol(data))
# Iteratively calculate the two matrices, K = 5
for(k in 1:K){
# Run a loop and use apply function to update the scores using f1 and f2.
for(i in 1:(nrow(data)-1)) {
s_user[i, i:nrow(s_user) ] <- apply(data[i:nrow(data),], 1, f1, data[i, ],s_obj)
if( i %% 10==0){
print(i)
}
}
diag(s_user) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_user <- as.matrix(Matrix::forceSymmetric(s_user, uplo = "U"))
for(i in 1:(ncol(data)-1)) {
s_obj[i, i:ncol(s_obj) ] <- apply(data[,i:ncol(data)], 2, f2, data[, i],s_user)
}
diag(s_obj) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
# s_obj <- as.matrix(Matrix::forceSymmetric(s_obj, uplo = "U"))
print(c("k=",k))
print(s_user)
}
return(s_user)
}
temp <- simrank(MS_UI[1:100,])
f1 <- function(rowA, rowB,s_obj){
p_user <- rowA %*% t(rowB)
if(sum(p_user) < 0.1* nrow(p_user)*nrow(p_user)){
return(0)
}else{
len_x <- sum(rowA)
len_y <- sum(rowB)
if(len_x * len_y ==0){
return(0)
}else{
return(sum(s_obj * p_user)*C1/(len_x*len_y))
}
}
}
f2 <- function(colA, colB,s_user){
p_obj <- colA %*% t(colB)
len_a <- sum(colA)
len_b <- sum(colB)
if(len_a * len_b == 0){
return(0)
}else{
return(sum(s_user * p_obj) * C2/(len_a * len_b))
}
}
f1 <- function(rowA, rowB,s_obj){
p_user <- rowA %*% t(rowB)
if(sum(p_user) < 0.25* nrow(p_user)*nrow(p_user)){
return(0)
}else{
len_x <- sum(rowA)
len_y <- sum(rowB)
if(len_x * len_y ==0){
return(0)
}else{
return(sum(s_obj * p_user)*C1/(len_x*len_y))
}
}
}
f2 <- function(colA, colB,s_user){
p_obj <- colA %*% t(colB)
len_a <- sum(colA)
len_b <- sum(colB)
if(len_a * len_b == 0){
return(0)
}else{
return(sum(s_user * p_obj) * C2/(len_a * len_b))
}
}
simrank <- function(data){
# First construct the user and object score matrix
s_user <- diag(x = 1, nrow(data), nrow(data))
s_obj <- diag(x = 1, ncol(data), ncol(data))
# Iteratively calculate the two matrices, K = 5
for(k in 1:K){
# Run a loop and use apply function to update the scores using f1 and f2.
for(i in 1:(nrow(data)-1)) {
s_user[i, i:nrow(s_user) ] <- apply(data[i:nrow(data),], 1, f1, data[i, ],s_obj)
if( i %% 10==0){
print(i)
}
}
diag(s_user) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_user <- as.matrix(Matrix::forceSymmetric(s_user, uplo = "U"))
for(i in 1:(ncol(data)-1)) {
s_obj[i, i:ncol(s_obj) ] <- apply(data[,i:ncol(data)], 2, f2, data[, i],s_user)
}
diag(s_obj) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
# s_obj <- as.matrix(Matrix::forceSymmetric(s_obj, uplo = "U"))
print(c("k=",k))
print(s_user)
}
return(s_user)
}
temp <- simrank(MS_UI[1:100,])
f1 <- function(rowA, rowB,s_obj){
p_user <- rowA %*% t(rowB)
if(sum(p_user) < 0.1* nrow(p_user)*nrow(p_user)){
return(0)
}else{
len_x <- sum(rowA)
len_y <- sum(rowB)
if(len_x * len_y ==0){
return(0)
}else{
return(sum(s_obj * p_user)*C1/(len_x*len_y))
}
}
}
f2 <- function(colA, colB,s_user){
p_obj <- colA %*% t(colB)
len_a <- sum(colA)
len_b <- sum(colB)
if(len_a * len_b == 0){
return(0)
}else{
return(sum(s_user * p_obj) * C2/(len_a * len_b))
}
}
simrank <- function(data){
# First construct the user and object score matrix
s_user <- diag(x = 1, nrow(data), nrow(data))
s_obj <- diag(x = 1, ncol(data), ncol(data))
# Iteratively calculate the two matrices, K = 5
for(k in 1:K){
# Run a loop and use apply function to update the scores using f1 and f2.
for(i in 1:(nrow(data)-1)) {
s_user[i, i:nrow(s_user) ] <- apply(data[i:nrow(data),], 1, f1, data[i, ],s_obj)
if( i %% 10==0){
print(i)
}
}
diag(s_user) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_user <- as.matrix(Matrix::forceSymmetric(s_user, uplo = "U"))
for(i in 1:(ncol(data)-1)) {
s_obj[i, i:ncol(s_obj) ] <- apply(data[,i:ncol(data)], 2, f2, data[, i],s_user)
}
diag(s_obj) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
# s_obj <- as.matrix(Matrix::forceSymmetric(s_obj, uplo = "U"))
print(c("k=",k))
print(s_user)
}
return(s_user)
}
temp <- simrank(MS_UI[1:100,])
rowA <- MS_UI[1,]
rowB <- MS_UI[2,]
p_user <- rowA %*% t(rowB)
View(p_user)
dim(p_user)
sum(p_user)
66/269
f1 <- function(rowA, rowB,s_obj){
p_user <- rowA %*% t(rowB)
if(sum(p_user) < 0.3* nrow(p_user)){
return(0)
}else{
len_x <- sum(rowA)
len_y <- sum(rowB)
if(len_x * len_y ==0){
return(0)
}else{
return(sum(s_obj * p_user)*C1/(len_x*len_y))
}
}
}
f2 <- function(colA, colB,s_user){
p_obj <- colA %*% t(colB)
len_a <- sum(colA)
len_b <- sum(colB)
if(len_a * len_b == 0){
return(0)
}else{
return(sum(s_user * p_obj) * C2/(len_a * len_b))
}
}
simrank <- function(data){
# First construct the user and object score matrix
s_user <- diag(x = 1, nrow(data), nrow(data))
s_obj <- diag(x = 1, ncol(data), ncol(data))
# Iteratively calculate the two matrices, K = 5
for(k in 1:K){
# Run a loop and use apply function to update the scores using f1 and f2.
for(i in 1:(nrow(data)-1)) {
s_user[i, i:nrow(s_user) ] <- apply(data[i:nrow(data),], 1, f1, data[i, ],s_obj)
if( i %% 10==0){
print(i)
}
}
diag(s_user) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
s_user <- as.matrix(Matrix::forceSymmetric(s_user, uplo = "U"))
for(i in 1:(ncol(data)-1)) {
s_obj[i, i:ncol(s_obj) ] <- apply(data[,i:ncol(data)], 2, f2, data[, i],s_user)
}
diag(s_obj) <- 1
# Since we only filled in the upper triangle, copy and paste to the lower triangle
# s_obj <- as.matrix(Matrix::forceSymmetric(s_obj, uplo = "U"))
print(c("k=",k))
print(s_user)
}
return(s_user)
}
temp <- simrank(MS_UI[1:100,])
temp <- simrank(MS_UI)
